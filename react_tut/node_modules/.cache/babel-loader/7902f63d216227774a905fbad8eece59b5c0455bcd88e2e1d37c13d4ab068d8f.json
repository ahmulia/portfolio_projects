{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DT User\\\\Desktop\\\\CS\\\\visual studio\\\\react_tut\\\\src\\\\components\\\\meme.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\n/* import memesData from \"../memesData\"; */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n  // const[memeImage, urlLink] = React.useState(\"\")\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/lbij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState({});\n  function getMeme() {\n    async function getMemes() {\n      const res = await fetch();\n    }\n    const theMeme = allMemes;\n    const randomNumber = Math.floor(Math.random() * theMeme.length);\n    const url = theMeme[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      //pulling all of the properties of previous Meme\n      randomImage: url\n    }));\n  }\n  React.useEffect(function () {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n  function InputText(event) {\n    console.log(\"im here\");\n    const {\n      type,\n      placeholder,\n      onChange,\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labels\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        onChange: InputText,\n        name: \"topText\",\n        value: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        onChange: InputText,\n        name: \"bottomText\",\n        value: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btnContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getMeme,\n        children: \" Get a new meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"imgContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        alt: \"\",\n        className: \"memeImg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"toptxt\",\n        children: [\" \", meme.topText, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"bottomtxt\",\n        children: [\" \", meme.bottomText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"o74CYXlt5ezQiRsvH3g25zGYOKs=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","useState","topText","bottomText","randomImage","allMemes","setAllMemes","getMeme","getMemes","res","fetch","theMeme","randomNumber","Math","floor","random","length","url","prevMeme","useEffect","then","json","data","memes","InputText","event","console","log","type","placeholder","onChange","name","value","target","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/DT User/Desktop/CS/visual studio/react_tut/src/components/meme.js"],"sourcesContent":["import React from \"react\";\r\n/* import memesData from \"../memesData\"; */\r\n\r\n\r\nexport default function Meme() {\r\n   // const[memeImage, urlLink] = React.useState(\"\")\r\n\r\n   const [meme, setMeme] = React.useState({\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImage: \"http://i.imgflip.com/lbij.jpg\"\r\n\r\n        }\r\n   )\r\n\r\n   const [allMemes, setAllMemes] = React.useState({})\r\n\r\n    function getMeme () {\r\n        async function getMemes () {\r\n            const res = await fetch ()\r\n        }\r\n        \r\n        const theMeme = allMemes\r\n        const randomNumber = Math.floor(Math.random() * theMeme.length)\r\n        const url = theMeme[randomNumber].url\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme, //pulling all of the properties of previous Meme\r\n            randomImage: url\r\n        }))\r\n       \r\n        \r\n        \r\n    }\r\n\r\n    React.useEffect(function() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(res => res.json())\r\n        .then(data => setAllMemes(data.data.memes))\r\n    },[])\r\n\r\n    function InputText (event) {\r\n        console.log(\"im here\")\r\n        const {type,placeholder,onChange,name,value} = event.target\r\n        setMeme (prevMeme => ({\r\n            ...prevMeme,\r\n            [name] : value \r\n\r\n        }))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"form\">\r\n\r\n            <div className=\"labels\">\r\n\r\n            <input\r\n             type=\"text\" \r\n             placeholder=\"Top text\"\r\n             onChange={InputText}\r\n             name=\"topText\"\r\n             value={meme.topText}\r\n             />\r\n            \r\n\r\n            <input\r\n             type=\"text\" \r\n             placeholder=\"Bottom text\"\r\n             onChange={InputText}\r\n             name=\"bottomText\"\r\n             value={meme.bottomText}\r\n            />\r\n\r\n             \r\n            \r\n            </div>\r\n            <div className=\"btnContainer\">\r\n            <button onClick={getMeme}> Get a new meme image</button>\r\n            </div>\r\n\r\n            <div className=\"imgContainer\">\r\n            <img src={meme.randomImage} alt=\"\" className=\"memeImg\"/>\r\n            <h2 className=\"toptxt\" > {meme.topText} </h2>\r\n            <h2 className=\"bottomtxt\" > {meme.bottomText}</h2>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}